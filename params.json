{"name":"Open Advancement of Question Answering Systems","tagline":"Oaqa website","body":"### Open advancement\r\n\r\nThe open-source __OAQA__ project is dedicated to open advancement in the engineering of question answering systems - language software systems that provide direct answers to questions posed in natural language. Since 2007, Carnegie Mellon has collaborated with IBM Research and other universities to advance the state of the art in language systems architecture, component algorithms, and end-to-end performance by establishing a shared vision, architectural commitments, and process to prioritize and guide an agile approach to developing high-performance applications.\r\n\r\n * __Vision__. We believe that research and development of complex language technologies can be accelerated significantly by adhering to a set of architectural principles coupled with a formal, iterative development process.\r\n * __Commitments__. In order to define and effectively search the space of possible solutions (software systems) for a task, a team must commit to a shared architecture, resources, tools and metrics - at both the component and system level.\r\n * __Process__. In order to make rapid progress and, each system iteration must undergo a formal build / test / evaluate / analyze / prioritize cycle to keep the team focused on improvements that have the greatest impact.\r\n\r\nThe Watson question answering system developed at IBM research is the first highly-visible example of what is possible with this approach. The OAQA approach is the foundation for many sponsored research and development projects in the Language Technologies Institute at CMU, not only for question answering but also for related language applications such as Multimedia Event Detection. \r\n\r\n### Project organization\r\n\r\nAt the base of the Open Advancement stack we have the [CSE-Framework](https://github.com/oaqa/cse-framework), the framework provides a common ground for experimentation and analysis. \r\n\r\nOn top of the CSE-Framework, we've built task level resources that provide pipelines, tools and metrics for building specific language processing components: [BaseQA](https://github.com/oaqa/baseqa) for question answering, etc.\r\n\r\nTo benefit developers who are already familiar with UIMA framework, we have developed a tutorial on CSE in alignment with the examples in the official UIMA tutorial: http://github.com/oaqa/oaqa-tutorial/wiki/Tutorial.\r\n\r\nAnalogous to a typical UIMA CPE descriptor, components, configurations, and collection readers\r\nin the CSE framework are declared in extended configuration descriptors7, which are based\r\non the YAML format: http://github.com/oaqa/uima-ecd.\r\n\r\nGlobal resource caching. As these online resources, e.g. biomedical ontologies, EntrezGene,\r\nMeSH, etc., might sometimes become temporarily unavailable or have their contents updated,\r\nwhich makes it difficult to reproduce specific experimental results, we implement a generic resource\r\ncaching strategy as part of the CSE framework implementation: http://github.com/oaqa/resource-wrappers.\r\n\r\nThe component ranking strategy can be configured by the user; several heuristic strategies are implemented in the open source software: https://github.com/oaqa/bagpipes.\r\n\r\nThe implemented components, benchmarks, task-specific evaluation methods are included\r\nin domain-specific layer named BioQA, which was plugged into the BaseQA framework: http://github.com/oaqa/bioqa.\r\n\r\n* [OAQA tutorial](https://github.com/oaqa/oaqa-tutorial/wiki/Tutorial)\r\n* [Wiki content, structure, and general rules](https://github.com/oaqa/oaqa.github.com/wiki/WikiInfo)\r\n* [OAQA development teams](https://github.com/oaqa/oaqa.github.com/wiki/Teams) \r\n* [Etiquette for working on another team's repo](https://github.com/oaqa/oaqa.github.com/wiki/InterTeamPractices) \r\n* [OAQA development model/developer manual](https://github.com/oaqa/oaqa.github.com/wiki/DevModel) \r\n* [OAQA development coding conventions](https://github.com/oaqa/oaqa.github.com/wiki/Coding-Style) \r\n\r\n### Authors and Contributors\r\nContact: Eric Nyberg [www](http://www.cs.cmu.edu/~ehn/), Zi Yang (@ziy), Avner Maiberg (@amaiberg), Elmer Garduno (@elmer-garduno) or check [here](https://github.com/oaqa?tab=members) for a list of all our contibutors.\r\n\r\n### Publications\r\n* Z. Yang, E. Garduno, Y. Fang, A. Maiberg, C. McCormack, and E. Nyberg. Building optimal information systems automatically: Configuration space exploration for biomedical information systems. _In_\r\n_Proceedings of the CIKMâ€™13_, 2013.\r\n* Alkesh Patel, Zi Yang, Eric Nyberg and Teruko Mitamura. Building Optimal Question Answering System Automatically using Configuration Space Exploration (CSE) _QA4MRE 2013 Tasks_\r\n* Elmer Garduno, Zi Yang, Avner Maiberg, Collin McCormack, Yan Fang, Eric Nyberg. CSE Framework: A UIMA-based Distributed System for Configuration Space Exploration _Unstructured Information Management Architecture (UIMA) 3rd UIMA@GSCL Workshop_\r\n\r\n### Reference\r\n* https://mu.lti.cs.cmu.edu/trac/oaqa\r\n* https://mu.lti.cs.cmu.edu/trac/oaqa2.0","google":"UA-35132887-1","note":"Don't delete this file! It's used internally to help with page regeneration."}