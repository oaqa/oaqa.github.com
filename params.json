{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Open Advancement of Question Answering Systems","body":"### Open Advancement of Question Answering.\r\n\r\nThe open-source OAQA project is dedicated to open advancement in the engineering of question answering systems - language software systems that provide direct answers to questions posed in natural language. Since 2007, Carnegie Mellon has collaborated with IBM Research and other universities to advance the state of the art in language systems architecture, component algorithms, and end-to-end performance by establishing a shared vision, architectural commitments, and process to prioritize and guide an agile approach to developing high-performance applications.\r\n\r\n * Vision. We believe that research and development of complex language technologies can be accelerated significantly by adhering to a set of architectural principles coupled with a formal, iterative development process.\r\n * Commitments. In order to define and effectively search the space of possible solutions (software systems) for a task, a team must commit to a shared architecture, resources, tools and metrics - at both the component and system level.\r\n * Process. In order to make rapid progress and, each system iteration must undergo a formal build / test / evaluate / analyze / prioritize cycle to keep the team focused on improvements that have the greatest impact.\r\n\r\nThe Watson question answering system developed at IBM research is the first highly-visible example of what is possible with this approach. The OAQA approach is the foundation for many sponsored research and development projects in the Language Technologies Institute at CMU, not only for question answering but also for related language applications such as Multimedia Event Detection. \r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.","google":"","tagline":"Oaqa website"}